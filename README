Caroline Roig-Irwin clr2176
CS 4111 Assignment 1a

NOTE: hw1.py was written in python 2.7

HOW TO RUN:
1. Enter 'python hw1_clr2176.py' on the command line (or python2 if your default python is 3.x). Please run the program in the same directory as where orders.csv and customers.csv are located, as both are given the relative address of 'orders.csv' and 'customers.csv'. 

2. A prompt 'HW1DB>' will show up on the command line. Please enter a prompt beginning with 'find/insert (case-insensitive) customers/orders <data>', for example:
	FIND customers CustomerID=ANTON
	INSERT customers ("DFF9", "Don Company", "D. Ferguson", "Professor",  "W 166th St.", "New York", "NY", "10027", "USA", "212-555-1212", null)
	FIND orders ShipVia=3,CustomerID="VINET"
	
Please note that data fields may be enclosed in double-quotes, or they may not. Please do not enclose data fields in single quotes (single quotes will be taken literally, and such a value of 'myValue' is not treated as equivalent to a value of "myValue" or myValue, though the latter two are treated as equivalent). If there is a comma in a data field, please enclose that field in double quotes so that the comma is not counted as a delimiter. 

3. When you are done running find/insert operations, please type EXIT to exit the HW1DB prompt.


ASSUMPTIONS:
-Column names will not contain the characters = or ,
-CSV files in use will not be moved or deleted while hw1.py is running
-the only files that will need to be read/written are orders.csv and customers.csv from northwind
-Input values for FIND and INSERT are comma-delimited (the comma may or may not have trailing whitespace)
-Data values will never contain the double-quote (") character. Data values may be enclosed within a set of two, however.
-Primary key columns will not change for either file.


Design Decisions:
-Values enclosed in double quotes are treated as equivalent to the same string without the enclosing double quotes. The python CSV library loads values that are enclosed in double quotes as the value without them (i.e. "myValue" is loaded as myValue), and all of the nonnumeric initial values in the given CSV are enclosed within quotations. If the user inputs values in quotation marks, they will be written into the CSV in quotation marks. If the user inputs values that are not in quotation marks, they will be written into the CSV without quotation marks. However, we are treating "myValue" as equivalent to myValue, so for an INSERT, if myValue OR "myValue" is stored as a primary key, a set of values with the primary key of myValue OR "myValue" will not succeed due to conflict.

-For INSERT operations, file writes are committed immediately. In the long run, overhead may be expensive from opening and closing the same file repeatedly, but the files for this project are small and assumed to be relatively inexpensive to load into memory. However, this assures that all insert operations that report they are successfully completed truly have written output to the file, rather than waiting for the next find operation or termination of the program.

-for FIND operations, the file is opened and closed every time as well. FIND does not have to be committed, but rather than keep track of a file descriptor and return the position to zero each time, and in order to be consistent with INSERT, I will continue this practice.

-metadata for the literal tables is stored via a python dictionary. The keys are the table names ('orders' and 'customers', stored as strings) and the values are a two-item list of [filename,PK]. They were stored together in order to make the functions table-independent. I could have chosen to include all of the column names in the dictionary for each table, but checking input against the file itself is a relatively easy operation and at this scale opening the file is not particularly costly.

-output of a FIND operation is a printed representation of a python dictionary. There is no guarantee as to the order in which fields are stored, but all will be printed to the screen as ordered pairs. I feel this is adequate output for this assignment, as it includes all requisite information.

-A command line interface was chosen as it makes parsing commands with quotation marks and values with commas much easier. 


Errors (none are fatal):
-When the user specifies a table that is not 'orders' or 'customers' in all-lowercase letters
-When the user specifies a command other than FIND/INSERT/EXIT
-Too few arguments
-When the user attempts to FIND a column that does not exist in the specified table
-When the user attempts to FIND two values (even if they are the same) of the same column (e.g. "FIND orders ShipVia=3,ShipVia=3")
-When FIND is not specified on a list of values in the format of "column1=value1, column2=value2, ...columnN=valueN" or INSERT is not specified on a list of values in the format of (value1,value2...valueN). Delimiters other than a comma will be treated as regular characters and the entire string between commas will be treated as one column.
-A FIND result that returns zero rows is not an error, and thus does not print anything to stderr. If a FIND result returns nothing and prompts you again, you may assume that no errors were found but no matches were found either.



WORKS CITED
https://docs.python.org/2/library/csv.html (for use of the CSV library)